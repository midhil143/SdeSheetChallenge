My Brute Solution :

class Solution {
    
private:
    vector<int> helper(vector<int> a,vector<int> b){
        vector<int> res;
        
        int first = min(a[0],b[0]);
        int second = max(a[1],b[1]);
        
        res.push_back(first);
        res.push_back(second);
        
        return res;
    }
    
public:
    vector<vector<int>> merge(vector<vector<int>>& v) {
        int n = v.size();
        
        if(n==1) return v;
        
        vector<vector<int>> ans;
        sort(v.begin(),v.end());
        
        for(int i=1;i<n;i++){
            int val;
            if(ans.size() == 0){
                val = v[0][1];
            }
            else{
                val = ans[ans.size()-1][1];
            }
            if(v[i][0] <= val){
                vector<int> temp;
                
                if(ans.size() == 0){
                    temp = helper(v[i-1],v[i]);
                    ans.push_back(temp);
                }
                else{
                    temp = helper(ans[ans.size()-1],v[i]);
                    ans.pop_back();
                    ans.push_back(temp);
                }
                
            }
            else{
                if(i==1){
                    ans.push_back(v[0]);
                }
                ans.push_back(v[i]);
            }
        }
        return ans;
    }
};



optimized code by striver:
class Solution {  
public:
    vector<vector<int>> merge(vector<vector<int>>& v) {
        vector<vector<int>> mergedIntervals;
        if(v.size() == 0){
            return mergedIntervals;
        }
        sort(v.begin(),v.end());
        vector<int> tempInterval = v[0];
        
        for(auto it : v){
            if(it[0] <= tempInterval[1]){
                tempInterval[1] = max(it[1],tempInterval[1]);
            }
            else{
                mergedIntervals.push_back(tempInterval);
                tempInterval = it;
            }
        }
        mergedIntervals.push_back(tempInterval);
        return mergedIntervals;
    }
};
